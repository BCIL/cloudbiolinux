#! /usr/bin/env ruby
#
# Integration testing of BioLinux targets
#
#   Installs a Biolinux flavor on a bare VM. The script wraps up with some tests.
#
# For more information see:
#
#   ./test/test_biolinux --help
#   ./test/test_biolinux --list
#
# See also the document in ./doc/linux_kvm.md

require 'rubygems'

# Available CloudBioLinux testing Flavors - this could be read from a YAML file.
FLAVOR = {
        'Minimal' =>
           { 
             :fabricrc    => 'contrib/minimal/fabricrc_debian.txt',
             :packagelist => 'contrib/minimal/main.yaml'
           },
        'Boinc' =>  # Boinc is a Minimal flavor for running Boinc clients
           { 
             :fabricrc    => 'contrib/flavor/boinc/fabricrc_debian.txt',
             :packagelist => 'contrib/flavor/boinc/main.yaml'
           },
        'Phylogeny' =>  # Phylogeny is a Minimal flavor for running Phylogenetic software in the Cloud
           { 
             :fabricrc    => 'contrib/flavor/phylogeny/fabricrc_debian.txt',
             :packagelist => 'contrib/flavor/phylogeny/main.yaml',
             :call_test   => 'test_phylogeny_flavor'
           },
        'BioNode' =>
           { 
             :fabricrc    => 'contrib/bionode/fabricrc_bionode.txt',
             :packagelist => 'contrib/bionode/main.yaml'
           },
}

print "Integration test for CloudBioLinux (by Pjotr Prins and Brad Chapman, 2012)\n"
print "BioLinux test frame work running on Ruby "+RUBY_VERSION+"\n"

# find location of test files
path = File.dirname(__FILE__)
$: << path+'/testlib'
require 'test_biolinux'

def run cmd
  print "--> ",cmd
  system(cmd)  # don't use backticks for fab!
end

def error msg
  $stderr.print "FATAL ERROR: ",msg
  exit 1
end

def list_boxes
  print "BioLinux Flavors available for testing:\n\n"
  FLAVOR.each do | edition, properties |
    print "* ", edition, " (",properties[:url],")\n"
  end
end

if ARGV.index('--list')
  list_boxes
  exit 0
end

if ARGV.index('-h') or ARGV.index('--help')
  print <<USAGE

    Note this testing framework is under development, and is meant to
    work on Debian-type systems.

  Usage:

    test_biolinux [--continue] [-i key] [-u user] [name]

  Options:

      -i            ssh key
      --continue    Continue install on an already running VM (no VM setup)
      --list        List Flavors available for testing
      --help        Print this info
      name          The target test Flavor name (default is 'Minimal')

  Example:

     cd to VM directory

       cd ~/my_test_vms/

     test Minimal edition - this will pull the remote box to local disk once

       $cloudbiolinux/test/test_biolinux IP Minimal

     after a fix, continue where we left off

       $cloudbiolinux/test/test_biolinux Minimal --continue

  Available flavors are:

USAGE
  list_boxes
  exit 0
end

$stderr.print "ERROR: Sorry, this test script is not yet functional\n"
exit 1

begin
  vagrant.primary_vm.ssh.execute do |ssh|
    # copy package list
    File.open("dpkg.lst","w").write(ssh.exec!("dpkg -l"))
    # Do we have ruby and tools?
    test_for_match(ssh,"/usr/bin/ruby -v", "ruby")
    test_for_match(ssh,"/usr/bin/rdoc -v", "RDoc")
    test_in_path(ssh,"gem")
    # Make sure Ruby 1.9.1 is in Minimal
    # test_for_match(ssh,"/usr/bin/ruby1.9.1 -v", "1.9")
    # Run flavor/edition specific tests
    eval(call_test+'(vagrant)') if call_test
    if test_for_completed_install(ssh,vagrant_hostname,box_name)
      print <<COMPLETE

  SUCCESS!

  The BioLinux installation test of '#{box_name}' completed successfully!
  You can check the running VM by logging in with:

    cd ./#{testname}
    vagrant ssh

  Enjoy!
COMPLETE
    exit 0
    end
  end
  print <<INCOMPLETE

  FAILURE!

  Somehow the test did not complete.

INCOMPLETE
  exit 1
end


