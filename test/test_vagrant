#! /usr/bin/ruby
#
# Integration testing of BioLinux targets - see
#
#   ./test/test_vagrant --help
#

# Available testing targets - this could be read from a YAML file.
BOX = { 'Minimal' =>
           { :url => 'http://mathie-vagrant-boxes.s3.amazonaws.com/debian_squeeze_32.box' }
}

print "Integration test script for CloudBioLinux\n"

def run cmd
  print "--> ",cmd
  system(cmd)
end

if ARGV.index('-h') or ARGV.index('--help')
  print <<USAGE

    Note this testing framework is under development

  Usage:

    test_vagrant [--continue] [edition] [flavor]

      --continue    Continue on an already running VM (no VM setup)
      edition       The target edition (default Minimal)
      flavor        The target flavor (default Base) (NYI)

  Example:

     cd to VM directory

       cd ~/my_test_vms/

     test Minimal edition - this will pull the remote box to local disk once

       $cloudbiolinux/test/test_vagrant Minimal

     this should pass, but if not (or at interrupt with ^C), start fixing
     with, for example

       cd vm_name
       vagrant ssh

     after a fix, continue where we left off

       $cloudbiolinux/test/test_vagrant Minimal --continue

  The base install vm_name.box will be pulled over the Internet, unless
  it exist in the local directory. For more information see ./doc/hacking.md

USAGE
  BOX.each do | edition, properties |
    print "* ", edition, " (",properties[:url],")\n"
  end
  exit 0
end

srcpath = File.dirname(File.dirname(__FILE__))
print srcpath, "\n"

edition_name = ARGV.shift
use_running_vm = false
if edition_name == '--continue'
  use_running_vm = true
  edition_name = ARGV.shift
end
edition_name = 'Minimal' if !edition_name # Default
flavor_name  = ARGV.shift
flavor_name  = 'Base' if !flavor_name # not used

print "Testing edition '#{edition_name}' flavor '#{flavor_name}'\n"
raise "Unknown box for #{edition_name}" if !BOX[edition_name]
remotebox = BOX[edition_name][:url]
localbox = File.basename(remotebox)

# find or install vagrant
print "gem install vagrant" if `which vagrant` !~ /vagrant/

# Name a temporary dir
testname = "biolinux_"+File.basename(localbox,".box")

if use_running_vm
  print "Continuing on an already running VM #{testname}\n"
else
  # Remove old box, if there
  run "vagrant box remove #{testname}"

  if File.exist?(localbox)
    print "Starting from local #{localbox}\n"
    run "vagrant box add #{testname} #{localbox}"
  else
    print "Fetching #{remotebox}\n"
    run "vagrant box add #{testname} #{remotebox}"
  end

  Dir.mkdir(testname) if !File.directory?(testname)
  # Bring VM up
  Dir.chdir(testname) do
    print `ls -l`
    run "vagrant init #{testname}"
    run "vagrant up"
  end
end

if not File.directory?(testname)
  $stderr.print "VM #{testname} appears not to be installed"
  exit 1
end

# Using the VM
Dir.chdir(testname) do
  # Fetch the vagrant ssh key, and store it locally
  # First see if we can copy a file - if we can there is no need to update .ssh/config
  File.unlink('remote_hosts') if File.exists?('remote_hosts')
  run "scp vagrant:/etc/hosts remote_hosts"
  if !File.exist?('remote_hosts')
    run "vagrant ssh-config >> ~/.ssh/config"
    run "scp vagrant:/etc/hosts remote_hosts"
  end
  raise "Problem connecting to remote hosts (using scp)" if !File.exist?('remote_hosts')
  File.unlink('remote_hosts')
  # run "vagrant status"
  print "We can use #{testname}!\n"

  # Fire up the fab file
  run "fab -f #{srcpath}/fabfile.py -H vagrant  -c #{srcpath}/contrib/minimal/fabricrc_debian.txt install_biolinux:packagelist=#{srcpath}/contrib/minimal/main.yaml"

end
